
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/*</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m></q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>    *****	MODULE BASED TEST BENCH FOR THE DUAL PORT RAM******</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>   </q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>    --------------   Initilizations No  -------------------  </q-m>
<a name="6"><q-n>     6  </q-n></a><q-m> </q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>     --&gt; Dual Port Ram</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>     --&gt; Test bench of its Dual Port Ram  </q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>    </q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>    --------------   General Info       -------------------</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>    </q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>     --&gt; This TB  will go with cover the Coverage such as Code coverage and functional coverage of the dual Port RAM </q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>     --&gt; This will initiate the test Vectors to the given DUT and verify the Functionality of the DUT </q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>     --&gt; And also We have to go with the Functional Coverage and Code coverage of the given DUT </q-m>
<a name="15"><q-n>     15  </q-n></a><q-m></q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>*/</q-m>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a><q-w>module</q-w> tb_dual_cverage # (<q-w>parameter</q-w> ADDR_WIDTH = 4 ,DATA_WIDTH =8, READ_LANTENCY =3 ,WRITE_LANTENCY =3 )();
<a name="21"><q-n>     21  </q-n></a> 
<a name="22"><q-n>     22  </q-n></a>  <q-w>reg</q-w>        [DATA_WIDTH-1:0] i_dina;
<a name="23"><q-n>     23  </q-n></a>  <q-w>reg</q-w>        [ADDR_WIDTH-1:0] i_addra;
<a name="24"><q-n>     24  </q-n></a>  <q-w>reg</q-w>                         i_ena;
<a name="25"><q-n>     25  </q-n></a>  <q-w>reg</q-w>                         i_clka;  
<a name="26"><q-n>     26  </q-n></a>  <q-w>reg</q-w>                         i_wea;
<a name="27"><q-n>     27  </q-n></a>  <q-w>reg</q-w>        [DATA_WIDTH-1:0] i_dinb;
<a name="28"><q-n>     28  </q-n></a>  <q-w>reg</q-w>        [ADDR_WIDTH-1:0] i_addrb;
<a name="29"><q-n>     29  </q-n></a>  <q-w>reg</q-w>                         i_enb;
<a name="30"><q-n>     30  </q-n></a>  <q-w>reg</q-w>                         i_clkb;
<a name="31"><q-n>     31  </q-n></a>  <q-w>reg</q-w>                         i_web;
<a name="32"><q-n>     32  </q-n></a>  <q-w>wire</q-w>       [DATA_WIDTH-1:0] o_douta;
<a name="33"><q-n>     33  </q-n></a>  <q-w>wire</q-w>       [DATA_WIDTH-1:0] o_doutb;
<a name="34"><q-n>     34  </q-n></a>   
<a name="35"><q-n>     35  </q-n></a> dual_port_ram # ( ADDR_WIDTH  ,DATA_WIDTH , READ_LANTENCY  ,WRITE_LANTENCY ) dut (
<a name="36"><q-n>     36  </q-n></a> 
<a name="37"><q-n>     37  </q-n></a>  .i_dina(i_dina),
<a name="38"><q-n>     38  </q-n></a>  .i_addra(i_addra),
<a name="39"><q-n>     39  </q-n></a>  .i_ena(i_ena),
<a name="40"><q-n>     40  </q-n></a>  .i_clka(i_clka), 
<a name="41"><q-n>     41  </q-n></a>  .i_wea(i_wea),
<a name="42"><q-n>     42  </q-n></a>  .i_dinb(i_dinb),
<a name="43"><q-n>     43  </q-n></a>  .i_addrb(i_addrb),
<a name="44"><q-n>     44  </q-n></a>  .i_enb(i_enb),
<a name="45"><q-n>     45  </q-n></a>  .i_clkb(i_clkb),
<a name="46"><q-n>     46  </q-n></a>  .i_web(i_web),
<a name="47"><q-n>     47  </q-n></a>  . o_douta(o_douta),
<a name="48"><q-n>     48  </q-n></a>  . o_doutb(o_doutb)
<a name="49"><q-n>     49  </q-n></a>   
<a name="50"><q-n>     50  </q-n></a> );
<a name="51"><q-n>     51  </q-n></a>  
<a name="52"><q-n>     52  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="53"><q-n>     53  </q-n></a>    i_clka =1'b0;
<a name="54"><q-n>     54  </q-n></a>    i_clkb =1'b0;
<a name="55"><q-n>     55  </q-n></a>  <q-w>end</q-w>
<a name="56"><q-n>     56  </q-n></a>  <q-w>always</q-w> #5 i_clka = !i_clka;
<a name="57"><q-n>     57  </q-n></a>
<a name="58"><q-n>     58  </q-n></a>  <q-w>always</q-w> #5 i_clkb = !i_clkb;
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a><q-m>// Main module that contains and test </q-m>
<a name="61"><q-n>     61  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="62"><q-n>     62  </q-n></a>    <q-w>fork</q-w> 
<a name="63"><q-n>     63  </q-n></a>      <q-w>begin</q-w> 
<a name="64"><q-n>     64  </q-n></a>        <q-w>repeat</q-w>(1000)
<a name="65"><q-n>     65  </q-n></a>        test_portb();
<a name="66"><q-n>     66  </q-n></a>      <q-w>end</q-w>
<a name="67"><q-n>     67  </q-n></a>      <q-w>begin</q-w> 
<a name="68"><q-n>     68  </q-n></a>        <q-w>repeat</q-w> (1000)
<a name="69"><q-n>     69  </q-n></a>        test_porta();
<a name="70"><q-n>     70  </q-n></a>      <q-w>end</q-w>
<a name="71"><q-n>     71  </q-n></a>    <q-w>join</q-w> 
<a name="72"><q-n>     72  </q-n></a>  <q-w>end</q-w> 
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a><q-m>//  Functional Coverage Block </q-m>
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a><q-m>// Adding functional coverage </q-m>
<a name="77"><q-n>     77  </q-n></a>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a> 
<a name="80"><q-n>     80  </q-n></a>
<a name="81"><q-n>     81  </q-n></a>
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a>
<a name="92"><q-n>     92  </q-n></a><q-m>// Declared the task to generate teh Random stimuls and give it to the random adderss and data  of the port a </q-m>
<a name="93"><q-n>     93  </q-n></a> 
<a name="94"><q-n>     94  </q-n></a>  <q-w>task</q-w>  test_porta(); 
<a name="95"><q-n>     95  </q-n></a>   i_dina= $urandom();
<a name="96"><q-n>     96  </q-n></a>   i_addra=$urandom_range(0,17);     <q-m>// Range is Randomized since the no of address loactions are fixed and  depend on the addrss width</q-m>
<a name="97"><q-n>     97  </q-n></a>   <q-w>repeat</q-w>(4) @( <q-a>posedge</q-w> (i_clka));
<a name="98"><q-n>     98  </q-n></a>   i_ena =1'b1;
<a name="99"><q-n>     99  </q-n></a>   i_wea =1'b1;
<a name="100"><q-n>     100  </q-n></a>   $display(<q-l>"Data Written into the memory of the adders[=%0d] and data[=%0d] "</q-l>,i_addra ,i_dina, );
<a name="101"><q-n>     101  </q-n></a>   <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clka));
<a name="102"><q-n>     102  </q-n></a>   i_ena =1'b1;
<a name="103"><q-n>     103  </q-n></a>   i_wea =1'b0;
<a name="104"><q-n>     104  </q-n></a>  <q-m>// $display("Data Read from the memory is %0d",dut.o_douta );</q-m>
<a name="105"><q-n>     105  </q-n></a>   <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clka));
<a name="106"><q-n>     106  </q-n></a>   i_ena =1'b0;
<a name="107"><q-n>     107  </q-n></a>   i_wea =1'b1;
<a name="108"><q-n>     108  </q-n></a>   <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clka));
<a name="109"><q-n>     109  </q-n></a>   i_ena =1'b0;
<a name="110"><q-n>     110  </q-n></a>   i_wea =1'b0;
<a name="111"><q-n>     111  </q-n></a>   <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clka));
<a name="112"><q-n>     112  </q-n></a>   i_ena =1'b1;
<a name="113"><q-n>     113  </q-n></a>   i_wea =1'b0;
<a name="114"><q-n>     114  </q-n></a>    <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clka));
<a name="115"><q-n>     115  </q-n></a>    i_ena =1'b1;
<a name="116"><q-n>     116  </q-n></a>    i_wea =1'b1;
<a name="117"><q-n>     117  </q-n></a>
<a name="118"><q-n>     118  </q-n></a>  <q-w>endtask</q-w> 
<a name="119"><q-n>     119  </q-n></a> 
<a name="120"><q-n>     120  </q-n></a><q-m>// Declared the task to generate teh Random stimuls and give it to the random adderss and data  of the port b </q-m>
<a name="121"><q-n>     121  </q-n></a>
<a name="122"><q-n>     122  </q-n></a>   <q-w>task</q-w> test_portb();  
<a name="123"><q-n>     123  </q-n></a>     i_dinb= $urandom();
<a name="124"><q-n>     124  </q-n></a>     i_addrb= $urandom_range(0,17 ); <q-m>// Range is Randomized since the no of address loactions are fixed and depend on the addrss width</q-m>
<a name="125"><q-n>     125  </q-n></a>     <q-w>repeat</q-w>(4) @( <q-a>posedge</q-w> (i_clkb));
<a name="126"><q-n>     126  </q-n></a>     i_enb =1'b1;
<a name="127"><q-n>     127  </q-n></a>     i_web =1'b1;
<a name="128"><q-n>     128  </q-n></a>     $display(<q-l>"Data Written into the memory of the adders[=%0d] and data[=%0d] "</q-l>,i_dinb, i_addrb );
<a name="129"><q-n>     129  </q-n></a>     <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clkb));
<a name="130"><q-n>     130  </q-n></a>     i_enb =1'b1;
<a name="131"><q-n>     131  </q-n></a>     i_web =1'b0;
<a name="132"><q-n>     132  </q-n></a>    <q-m>// $display("Data Read from the memory is %0d",dut.o_doutb );</q-m>
<a name="133"><q-n>     133  </q-n></a>     <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clkb));
<a name="134"><q-n>     134  </q-n></a>     i_enb =1'b0;
<a name="135"><q-n>     135  </q-n></a>     i_web =1'b1;
<a name="136"><q-n>     136  </q-n></a>     <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clkb));
<a name="137"><q-n>     137  </q-n></a>     i_enb =1'b0;
<a name="138"><q-n>     138  </q-n></a>     i_web =1'b0;
<a name="139"><q-n>     139  </q-n></a>     <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clkb));
<a name="140"><q-n>     140  </q-n></a>     i_enb =1'b1;
<a name="141"><q-n>     141  </q-n></a>     i_web =1'b0;
<a name="142"><q-n>     142  </q-n></a>     <q-w>repeat</q-w>(5) @( <q-a>posedge</q-w> (i_clkb));
<a name="143"><q-n>     143  </q-n></a>     i_enb =1'b1;
<a name="144"><q-n>     144  </q-n></a>     i_web =1'b1;
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a>    
<a name="147"><q-n>     147  </q-n></a>   
<a name="148"><q-n>     148  </q-n></a> <q-w>endtask</q-w> 
<a name="149"><q-n>     149  </q-n></a> 
<a name="150"><q-n>     150  </q-n></a> 
<a name="151"><q-n>     151  </q-n></a> <q-w>initial</q-w> <q-w>begin</q-w>
<a name="152"><q-n>     152  </q-n></a>  # 50000 ;
<a name="153"><q-n>     153  </q-n></a>  $finish();
<a name="154"><q-n>     154  </q-n></a> <q-w>end</q-w>
<a name="155"><q-n>     155  </q-n></a>
<a name="156"><q-n>     156  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
